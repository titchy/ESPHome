esphome:
  name: foxess-inverter
  friendly_name: foxess-inverter


esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: VERBOSE
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: "replace"

ota:


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Inverter Fallback Hotspot"
    password: "replace"

captive_portal:

time:
  - platform: homeassistant
    id: ha_time

uart:
  id: uart_1
  tx_pin: 16
  rx_pin: 17
  baud_rate: 9600
  stop_bits: 1
  rx_buffer_size: 1024
#  debug:
#    direction: BOTH
#    dummy_receiver: false
#    after:
#      timeout: 100ms
#    sequence:
#      - lambda: UARTDebug::log_string(direction, bytes);

i2c:
  scl: GPIO22
  sda: GPIO21
  scan: True
  id: bus_a
  frequency: 50kHz

modbus:
  send_wait_time: 200ms
  uart_id: uart_1
  id: mod_bus1
  flow_control_pin: 4

modbus_controller:
- id: inverterBus
  address: 245
  modbus_id: mod_bus1
  command_throttle: 1000ms
  setup_priority: -20
  #update_interval: 30s

button:
  - platform: template
    name: "Set Charge Windows" #Going to grab valus from the windows settings and write all 6 modbus parameters back to the inverter
    id: set_charge_windows
    on_press:
      - logger.log: "Set Charge Windows Button pressed"
      - lambda: |-
          ESP_LOGV("main", "Set Charge Windows Button pressed");
          uint16_t Window1Enabled=0,Window2Enabled=0;
          if (id(forced_charge_window_1).state == "Enable") {Window1Enabled=1;};
          if (id(forced_charge_window_2).state == "Enable") {Window2Enabled=1;};
          esphome::modbus_controller::ModbusController *controller = id(inverterBus);
          // 1 or 0 in 1st and 4th register and HighByte=Hour,LowByte=Minutes in 2nd 3rd 5th and 6th registers
          std::vector<uint16_t> charge_data = {
          Window1Enabled,
          uint16_t((id(charge_window_1_start).hour << 8) | id(charge_window_1_start).minute ),
          uint16_t((id(charge_window_1_end).hour << 8) | id(charge_window_1_end).minute ),
          Window2Enabled,
          uint16_t((id(charge_window_2_start).hour << 8) | id(charge_window_2_start).minute ),
          uint16_t((id(charge_window_2_end).hour << 8) | id(charge_window_2_end).minute )
          };
          ESP_LOGV("main", "Setting charge window with data");
          esphome::modbus_controller::ModbusCommandItem set_charge_data_command = esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 41001, charge_data.size(), charge_data);
          controller->queue_command(set_charge_data_command);
  - platform: template
    name: "Set Inverter Clock" #Going to grab time now and set clock
    id: set_inverter_clock
    on_press:
      - logger.log: "Set Inverter Clock Pressed"
      - lambda: |-
          ESP_LOGV("main", "Set Inverter Clock Button Pressed");
          auto theTime = id(ha_time).now();
          esphome::modbus_controller::ModbusController *acontroller = id(inverterBus);
          // 1 or 0 in 1st and 4th register and HighByte=Hour,LowByte=Minutes in 2nd 3rd 5th and 6th registers
          std::vector<uint16_t> rtc_data = {
            uint16_t((theTime.minute << 8) | theTime.second), 
            uint16_t((theTime.day_of_month << 8) | theTime.hour),
            uint16_t((theTime.year << 8) | theTime.month)
          };
          ESP_LOGV("main", "Setting Inverter Clock...");
          esphome::modbus_controller::ModbusCommandItem set_charge_data_command = esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(acontroller, 11093, rtc_data.size(), rtc_data);
          acontroller->queue_command(set_charge_data_command);

datetime:
  - platform: template
    type: date 
    name: "Clock Date"
    id: clock_date
    optimistic: yes
  - platform: template
    type: time 
    name: "Clock Time"
    id: clock_time
    optimistic: yes
  - platform: template
    type: time
    name: "Charge Window 1 Start"
    id: charge_window_1_start
    optimistic: yes
  - platform: template
    type: time
    name: "Charge Window 1 End"
    id: charge_window_1_end
    optimistic: yes
  - platform: template
    type: time
    name: "Charge Window 2 Start"
    id: charge_window_2_start
    optimistic: yes
  - platform: template
    type: time
    name: "Charge Window 2 End"
    id: charge_window_2_end
    optimistic: yes

text_sensor:
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: inverter_model
    bitmask: 0
    register_type: read
    address: 10000
    raw_encode: NONE #HEXBYTES
    name: "Model"
    skip_updates: 20
    response_size: 16
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: inverter_serial_number
    bitmask: 0
    register_type: read
    address: 10008
    raw_encode: NONE #HEXBYTES
    name: "Serial Number"
    skip_updates: 20
    response_size: 15
  
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    name: "rtc_clock"
    id: rtc_clock
    internal: true
    register_type: read
    address: 11093
    force_new_range: True
    register_count: 3
    raw_encode: HEXBYTES
    response_size: 6
    #                /*
    #                11093 Real time clock 9013 D7-0 Month, D15-8 Year
    #                11094 Real time clock 9014 D7-0 Hour, D15-8 Day
    #                11095 Real time clock 9015 D7-0 Second, D15-8 Minute
    #                */
    on_value:
      then:
        - lambda: |-
            ESP_LOGV("main", "decoding rtc hex encoded raw data: %s", x.c_str());
            uint8_t h=0,m=0,s=0,d=0,month_=0,y = 0 ;
            //{high8=99,low8=12} Year, Month
            //{high8=31,low8=23} Day, Hour
            //{high8=59,low8=59} Minute, Second
            y = esphome::modbus_controller::byte_from_hex_str(x,0);  //High
            month_ = esphome::modbus_controller::byte_from_hex_str(x,1);  //Low
            d = esphome::modbus_controller::byte_from_hex_str(x,2);  //High
            h = esphome::modbus_controller::byte_from_hex_str(x,3);  //Low
            m = esphome::modbus_controller::byte_from_hex_str(x,4);  //High
            s = esphome::modbus_controller::byte_from_hex_str(x,5);  //Low
            // Now check if the rtc time of the controller is ok and correct it
            time_t now = ::time(nullptr);
            struct tm *time_info = ::localtime(&now);
            int seconds = time_info->tm_sec;
            int minutes = time_info->tm_min;
            int hour = time_info->tm_hour;
            int day = time_info->tm_mday;
            int month = time_info->tm_mon + 1;
            int year = time_info->tm_year % 100;
            char buffer[20];
            // format time as YYYY-mm-dd hh:mm:ss
            sprintf(buffer,"%04d-%02d-%02d",y+2000,month_,d);
            auto call5 = id(clock_date).make_call();
            call5.set_date(buffer);
            call5.perform();
            sprintf(buffer,"%02d:%02d:%02d",h,m,s);
            auto call6 = id(clock_time).make_call();
            call6.set_time(buffer);
            call6.perform();

  - platform: modbus_controller
    modbus_controller_id: inverterBus
    name: "charge_windows"
    id: charge_windows
    internal: true
    register_type: read
    address: 41001
    force_new_range: True
    register_count: 6
    raw_encode: HEXBYTES
    response_size: 12
    on_value:
      then:
        - lambda: |-
            ESP_LOGV("main", "decoding forced charge values encoded raw data: %s", x.c_str());
            uint8_t w1enabled=0,w2enabled=0,w1startHour=0,w1startMin=0,w1endHour=0,w1endMin=0,w2startHour=0,w2startMin=0,w2endHour=0,w2endMin=0;
            // w1enabled 0 or 1 in 1st word bytes 0 and 1 {0=disable,1=enable}
            w1enabled = esphome::modbus_controller::word_from_hex_str(x,0);
            if (w1enabled == 1) {
              id(forced_charge_window_1).publish_state("Enable");
            } else {
              id(forced_charge_window_1).publish_state("Disable");
            }
            // w1start High and low bytes in 2nd word, bytes 2 and 3 {HighByte=Hour,LowByte=Minutes}
            w1startHour = esphome::modbus_controller::byte_from_hex_str(x,2);  //High
            w1startMin = esphome::modbus_controller::byte_from_hex_str(x,3);  //Low
            // w1end High and low bytes in 3rd word, bytes 4 and 5 {HighByte=Hour,LowByte=Minutes}
            w1endHour = esphome::modbus_controller::byte_from_hex_str(x,4);  //High
            w1endMin = esphome::modbus_controller::byte_from_hex_str(x,5);  //Low
            // w2enabled 0 or 2 in 4th word, bytes 6 and 7 {0=disable,1=enable}
            w2enabled = esphome::modbus_controller::word_from_hex_str(x,6);
            if (w2enabled == 1) {
              id(forced_charge_window_2).publish_state("Enable");
            } else {
              id(forced_charge_window_2).publish_state("Disable");
            }
            // w2start High and low bytes in 5th word {HighByte=Hour,LowByte=Minutes}
            w2startHour = esphome::modbus_controller::byte_from_hex_str(x,8);  //High
            w2startMin = esphome::modbus_controller::byte_from_hex_str(x,9);  //Low
            // w2end High and low bytes in 6th word {HighByte=Hour,LowByte=Minutes}
            w2endHour = esphome::modbus_controller::byte_from_hex_str(x,10);  //High
            w2endMin = esphome::modbus_controller::byte_from_hex_str(x,11);  //Low
            char buffer[20];
            sprintf(buffer,"%02d:%02d:00",w1startHour,w1startMin);
            auto call1 = id(charge_window_1_start).make_call();
            call1.set_time(buffer);
            call1.perform();
            sprintf(buffer,"%02d:%02d:00",w1endHour,w1endMin);
            auto call2 = id(charge_window_1_end).make_call();
            call2.set_time(buffer);
            call2.perform();
            sprintf(buffer,"%02d:%02d",w2startHour,w2startMin);
            auto call3 = id(charge_window_2_start).make_call();
            call3.set_time(buffer);
            call3.perform();
            sprintf(buffer,"%02d:%02d",w2endHour,w2endMin);
            auto call4 = id(charge_window_2_end).make_call();
            call4.set_time(buffer);
            call4.perform();

sensor:
  - platform: bme280_i2c
    temperature:
      name: "Temperature"
      oversampling: 16x
    pressure:
      name: "Pressure"
    humidity:
      name: "Humidity"
    address: 0x76
    update_interval: 60s

  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: inverter_firmware_master
    name: "Inverter Firmware Master"
    address: 10016
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: inverter_firmware_slave
    name: "Inverter Firmware Slave"
    address: 10017
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: inverter_firmware_Manager
    name: "Inverter Firmware Manager"
    address: 10018
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: inverter_firmware_battery_master
    name: "Inverter Firmware Battery Master"
    address: 10019
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: inverter_firmware_battery_slave1
    name: "Inverter Firmware Battery Slave1"
    address: 10020
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: inverter_firmware_battery_slave2
    name: "Inverter Firmware Battery Slave2"
    address: 10021
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: inverter_firmware_battery_slave3
    name: "Inverter Firmware Battery Slave3"
    address: 10022
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: inverter_firmware_battery_slave4
    name: "Inverter Firmware Battery Slave4"
    address: 10023
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: inverter_firmware_battery_slave5
    name: "Inverter Firmware Battery Slave5"
    address: 10024
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: inverter_firmware_battery_slave6
    name: "Inverter Firmware Battery Slave6"
    address: 10025
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: inverter_firmware_battery_slave7
    name: "Inverter Firmware Battery Slave7"
    address: 10026
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: inverter_firmware_battery_slave8
    name: "Inverter Firmware Battery Slave8"
    address: 10027
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: pv1_voltage
    name: "PV1_Voltage"
    address: 11000
    unit_of_measurement: "V"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: pv1_current
    name: "PV1_Current"
    address: 11001
    unit_of_measurement: "A"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: pv1_power
    name: "PV1_Power"
    address: 11002
    unit_of_measurement: "kW"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 4
    filters:
      - multiply: 0.001
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: pv2_voltage
    name: "PV2_Voltage"
    address: 11003
    unit_of_measurement: "V"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: pv2_current
    name: "PV2_Current"
    address: 11004
    unit_of_measurement: "A"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: pv2_power
    name: "PV2_Power"
    address: 11005
    unit_of_measurement: "kW"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 4
    filters:
      - multiply: 0.001
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: battery_voltage
    name: "Battery_Voltage"
    address: 11006
    unit_of_measurement: "V"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: battery_current
    name: "Battery_Current"
    address: 11007
    unit_of_measurement: "A"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: battery_power
    name: "Battery_Power"
    address: 11008
    unit_of_measurement: "kW"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 4
    filters:
      - multiply: 0.001
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: grid_voltage
    name: "Grid Voltage"
    address: 11009
    unit_of_measurement: "V"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: inverter_current
    name: "Inverter Current"
    address: 11010
    unit_of_measurement: "A"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: inverter_power
    name: "Inverter Power"
    address: 11011
    unit_of_measurement: "kW"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 4
    filters:
      - multiply: 0.001
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: inverter_power_Q
    name: "Inverter Power Reactive"
    address: 11012
    unit_of_measurement: "VAR"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: inverter_power_S
    name: "Inverter Power Apparent"
    address: 11013
    unit_of_measurement: "VA"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: grid_frequency
    name: "Grid Frequency"
    address: 11014
    unit_of_measurement: "Hz"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: eps_voltage
    name: "EPS Voltage"
    address: 11015
    unit_of_measurement: "V"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: eps_current
    name: "EPS Current"
    address: 11016
    unit_of_measurement: "A"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: eps_power
    name: "EPS Power"
    address: 11017
    unit_of_measurement: "kW"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 4
    filters:
      - multiply: 0.001
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: eps_power_Q
    name: "EPS Power Reactive"
    address: 11018
    unit_of_measurement: "VAR"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: eps_power_S
    name: "EPS Power Apparent"
    address: 11019
    unit_of_measurement: "VA"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: eps_frequency
    name: "EPS Frequency"
    address: 11020
    unit_of_measurement: "Hz"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: meter1_power
    name: "Meter1 Power"
    address: 11021
    unit_of_measurement: "kW"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 4
    filters:
      - multiply: 0.001
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: meter2_power
    name: "Meter2 Power"
    address: 11022
    unit_of_measurement: "kW"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 4
    filters:
      - multiply: 0.001
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: load_power
    name: "Load Power"
    address: 11023
    unit_of_measurement: "kW"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 4
    filters:
      - multiply: 0.001
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: inverter_temperature
    name: "Inverter Temperature"
    address: 11024
    unit_of_measurement: "C"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: environment_temperature
    name: "Environment Temperature"
    address: 11025
    unit_of_measurement: "C"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  ###These are not entirely understood, feels like some should be settable:
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: cluster_ctrl_f32_PwrFeedback_P
    name: "Cluster Ctrl f32_Pwr Feedback_P"
    address: 11026
    unit_of_measurement: "kW"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 4
    filters:
      - multiply: 0.001
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: cluster_ctrl_f32_PwrFeedback_Q
    name: "Cluster Ctrl f32_Pwr Feedback_Q"
    address: 11027
    unit_of_measurement: "kW"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 4
    filters:
      - multiply: 0.001
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: cluster_ctrl_f32_PwrSet_P_DnLimit
    name: "Cluster Ctrl f32_PwrSet_P_Down Limit"
    address: 11028
    unit_of_measurement: "kW"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 4
    filters:
      - multiply: 0.001
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: cluster_ctrl_f32_PwrSet_P_UpLimit
    name: "Cluster Ctrl f32_PwrSet_P_Up Limit"
    address: 11029
    unit_of_measurement: "kW"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 4
    filters:
      - multiply: 0.001
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: cluster_Ctrl_f32_PwrSet_Q_DnLimit
    name: "Cluster Ctrl f32_PwrSet_Q_Down Limit"
    address: 11030
    unit_of_measurement: "kW"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 4
    filters:
      - multiply: 0.001
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: cluster_ctrl_f32_PwrSet_Q_UpLimit
    name: "Cluster Ctrl f32_PwrSet_Q_Up Limit"
    address: 11031
    unit_of_measurement: "kW"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 4
    filters:
      - multiply: 0.001
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: ac_power_limit_flag
    name: "AC Power Limit Flag"
    address: 11032
    unit_of_measurement: "kW"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 4
    filters:
      - multiply: 0.001
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: bat_power_limit_flag
    name: "Bat Power Limit Flag"
    address: 11033
    unit_of_measurement: "kW"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 4
    filters:
      - multiply: 0.001
  ####
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: bat_voltage
    name: "Bat Voltage"
    address: 11034
    unit_of_measurement: "V"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: bat_current
    name: "Bat Current"
    address: 11035
    unit_of_measurement: "A"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: bat_soc
    name: "Bat SOC"
    address: 11036
    unit_of_measurement: "%"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Bat_Residual_Energy
    name: "Bat Residual Energy"
    address: 11037
    unit_of_measurement: "Wh"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 10
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Bat_Temperature
    name: "Bat Temperature"
    address: 11038
    unit_of_measurement: "C"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Bat_Charge_Cut_Voltage
    name: "Bat Charge Cut Voltage"
    address: 11039
    unit_of_measurement: "V"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Bat_Discharge_Cut_Voltage
    name: "Bat Discharge Cut Voltage"
    address: 11040
    unit_of_measurement: "V"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Bat_Max_Charge_Current
    name: "Bat Max Charge Current"
    address: 11041
    unit_of_measurement: "A"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Bat_Max_Discharge_Current
    name: "Bat Max Discharge Current"
    address: 11042
    unit_of_measurement: "A"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Bat_Cel_Temp_High
    name: "Bat Cel Temp High"
    address: 11043
    unit_of_measurement: "C"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Bat_Cel_Temp_Low
    name: "Bat Cel Temp Low"
    address: 11044
    unit_of_measurement: "C"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Bat_Cel_Voltage_High
    name: "Bat Cel Voltage High"
    address: 11045
    unit_of_measurement: "V"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Bat_Cel_Voltage_Low
    name: "Bat Cel Voltage Low"
    address: 11046
    unit_of_measurement: "V"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Bat_Subsystem_Number
    name: "Bat Subsystem Number"
    address: 11047
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Bat_Bad_Cycle_Count
    name: "Bat Bad Cycle Count"
    address: 11048
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Bat_Energy_Throughput
    name: "Bat Energy Throughput"
    address: 11049
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Bat_Min_Soc
    name: "Bat Min SOC"
    address: 11050
    unit_of_measurement: "%"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
  - platform: modbus_controller ##This has {0=No,1=Yes} could be a text sensorwith required output
    modbus_controller_id: inverterBus
    id: Bat_Charge_Request
    name: "Bat Charge Request"
    address: 11051
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
  - platform: modbus_controller ##Need to know what the unit is
    modbus_controller_id: inverterBus
    id: Bat_Charge_Limit
    name: "Bat Charge Limit"
    address: 11052
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Bat_Discharge_Limit
    name: "Bat Discharge Limit"
    address: 11053
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: BatModuleType
    name: "Bat Module Type"
    address: 11054
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Connect_Time_Count
    name: "Connect Time Count"
    address: 11055
    unit_of_measurement: "S"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
  - platform: modbus_controller ##Text sensor? {0=wait,1=check,2=onGrid,3=offGrid,4=recoverableFault,5=unrecoverableFault}
    modbus_controller_id: inverterBus
    id: Inverter_State
    name: "Inverter State"
    address: 11056
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Bat_State
    name: "Bat State" ##Text Sensor? {0=idle,1=normal,2=offline}
    address: 11057
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: BMS_Connect_State
    name: "BMS Connect State" #Text Sensor? {0=Initial state,1=OK,2=NG}
    address: 11058
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Meter1_Connect_State
    name: "Meter1 Connect State" #Text Sensor? {0=OK,1=NG}
    address: 11059
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Meter2_Connect_State
    name: "Meter2 Connect State" #Text Sensor? {0=OK,1=NG}
    address: 11060
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Fault1
    name: "Fault1" #Need input on what this output indicates
    address: 11061
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Fault2
    name: "Fault2" #Need input on what this output indicates
    address: 11062
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Fault3
    name: "Fault3" #Need input on what this output indicates
    address: 11063
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Fault4
    name: "Fault4" #Need input on what this output indicates
    address: 11064
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Fault5
    name: "Fault5" #Need input on what this output indicates
    address: 11065
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Fault6
    name: "Fault6" #Need input on what this output indicates
    address: 11066
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Fault7
    name: "Fault7" #Need input on what this output indicates
    address: 11067
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Fault8
    name: "Fault8" #Need input on what this output indicates
    address: 11068
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Total_PV_Energy
    name: "Total PV Energy"
    address: 11069
    force_new_range: True
    unit_of_measurement: "Kwh"
    register_type: read
    value_type: U_DWORD
    response_size: 4
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Today_PV_Energy
    name: "Today PV Energy"
    address: 11071
    unit_of_measurement: "Kwh"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Total_Charge_Energy
    name: "Total Charge Energy"
    address: 11072
    unit_of_measurement: "Kwh"
    register_type: read
    value_type: U_DWORD
    response_size: 4
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Today_Charge_Energy
    name: "Today Charge Energy"
    address: 11074
    unit_of_measurement: "Kwh"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Total_Discharge_Energy
    name: "Total Discharge Energy"
    address: 11075
    unit_of_measurement: "Kwh"
    register_type: read
    value_type: U_DWORD
    response_size: 4
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Today_Discharge_Energy
    name: "Today Discharge Energy"
    address: 11077
    unit_of_measurement: "Kwh"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Total_feed_in_Energy
    name: "Total feed-in Energy"
    address: 11078
    unit_of_measurement: "Kwh"
    register_type: read
    value_type: U_DWORD
    response_size: 4
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Today_feed_in_Energy
    name: "Today feed-in Energy"
    address: 11080
    unit_of_measurement: "Kwh"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Total_consumption_Energy
    name: "Total consumption Energy"
    address: 11081
    unit_of_measurement: "Kwh"
    register_type: read
    value_type: U_DWORD
    response_size: 4
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Today_consumption_Energy
    name: "Today consumption Energy"
    address: 11083
    unit_of_measurement: "Kwh"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Total_Output_Energy
    name: "Total Output Energy"
    address: 11084
    unit_of_measurement: "Kwh"
    register_type: read
    value_type: U_DWORD
    response_size: 4
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Today_Output_Energy
    name: "Today Output Energy"
    address: 11086
    unit_of_measurement: "Kwh"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Total_Input_Energy
    name: "Total Input Energy"
    address: 11087
    unit_of_measurement: "Kwh"
    register_type: read
    value_type: U_DWORD
    response_size: 4
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Today_Input_Energy
    name: "Today Input Energy"
    address: 11089
    unit_of_measurement: "Kwh"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Total_Load_Energy
    name: "Total Load Energy"
    address: 11090
    unit_of_measurement: "Kwh"
    register_type: read
    value_type: U_DWORD
    response_size: 4
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: Today_Load_Energy
    name: "Today Load Energy"
    address: 11092
    unit_of_measurement: "Kwh"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    name: "Grounding"
    id: grounding
    address: 41016
    force_new_range: True
    register_type: read
    value_type: U_WORD
    register_count: 1
    accuracy_decimals: 1
  - platform: template
    id: pv_power
    name: "PV_Power"
    unit_of_measurement: "kW"
    accuracy_decimals: 4
    lambda: |-
      return id(pv1_power).state + id(pv2_power).state;
    update_interval: 60s
  
select:
  - platform: template
    name: "Forced Charge Window 1"
    id: forced_charge_window_1
    optimistic: True
    options: 
      - "Enable"
      - "Disable"
  - platform: template
    name: "Forced Charge Window 2"
    id: forced_charge_window_2
    optimistic: True
    options: 
      - "Enable"
      - "Disable"

  - platform: modbus_controller
    name: "Work Mode"
    id: work_mode
    address: 41000
    force_new_range: True
    value_type: U_WORD
    register_count: 1
    optionsmap:
      "Self Use": 0
      "Feed-in First": 1
      "Backup": 2
  - platform: modbus_controller
    name: "System Enable"
    id: system_enable
    address: 41013
    force_new_range: True
    value_type: U_WORD
    register_count: 1
    optionsmap:
      "Off": 0
      "On": 1
  - platform: modbus_controller
    name: "EPS frequency Select"
    id: eps_frequency_select
    address: 41014
    force_new_range: True
    value_type: U_WORD
    register_count: 1
    optionsmap:
      "50 Hz": 0
      "60 Hz": 1
  - platform: modbus_controller
    name: "EPS enable"
    id: eps_enable
    address: 41015
    force_new_range: True
    value_type: U_WORD
    register_count: 1
    optionsmap:
      "Disable": 0
      "Enable": 1
  
number:
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: maximum_charge_current
    name: "Maximum Charge Current"
    address: 41007
    force_new_range: True
    unit_of_measurement: "A"
    register_type: holding
    value_type: U_WORD
    min_value: 0
    max_value: 50
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: maximum_discharge_current
    name: "Maximum Discharge Current"
    address: 41008
    force_new_range: True
    unit_of_measurement: "A"
    register_type: holding
    value_type: U_WORD
    min_value: 0
    max_value: 50
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: minimum_soc
    name: "Minimum SoC"
    address: 41009
    force_new_range: True
    unit_of_measurement: "%"
    register_type: holding
    value_type: U_WORD
    min_value: 0
    max_value: 100
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: maximum_soc
    name: "Maximum SOC"
    address: 41010
    force_new_range: True
    unit_of_measurement: "%"
    register_type: holding
    value_type: U_WORD
    min_value: 0
    max_value: 100
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: minimum_soc_on_grid
    name: "Minimum SoC on Grid"
    address: 41011
    force_new_range: True
    unit_of_measurement: "%"
    register_type: holding
    value_type: U_WORD
    min_value: 0
    max_value: 100
  - platform: modbus_controller
    modbus_controller_id: inverterBus
    id: export_limit
    name: "Export Limit"
    address: 41012
    force_new_range: True
    unit_of_measurement: "W"
    register_type: holding
    value_type: U_WORD
    min_value: 0
    max_value: 60000
